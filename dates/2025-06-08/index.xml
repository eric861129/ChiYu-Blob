<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025-06-08 on ChiYu Code Journey</title><link>/ChiYu-Blob/dates/2025-06-08/</link><description>Recent content in 2025-06-08 on ChiYu Code Journey</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 08 Jun 2025 00:00:00 +0800</lastBuildDate><atom:link href="/ChiYu-Blob/dates/2025-06-08/index.xml" rel="self" type="application/rss+xml"/><item><title>我是如何使用 AI (Codex) 打造這個 Hugo 部落格的</title><link>/ChiYu-Blob/posts/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ai-codex-%E6%89%93%E9%80%A0%E9%80%99%E5%80%8B-hugo-%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0800</pubDate><guid>/ChiYu-Blob/posts/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ai-codex-%E6%89%93%E9%80%A0%E9%80%99%E5%80%8B-hugo-%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84/</guid><description>在上一篇文章 《第一次認識 Codex：讓 AI 幫你寫程式不是夢！》 中，我介紹了 Codex 這個強大的 AI 程式助理。而今天，我想分享一個更具體的實戰經驗：我是如何利用 Codex 來開發你現在正在看的這個部落格。
這個網站是使用 Hugo 靜態網站產生器搭建的，並搭配 Tailwind CSS 進行樣式設計。從前端的 JavaScript 互動功能，到後端的 GitHub Actions 自動化部署，許多環節都有 AI 的深度參與。接下來，我會分享幾個關鍵功能的開發過程，以及我是如何「詠唱」我的需求，讓 AI 幫我完成任務的。
1. 前端互動功能：讓網站活起來的 JavaScript 靜態網站很容易變得單調，但透過 JavaScript，我們可以加入許多動態的現代化功能。這也是我認為 Codex 最能大顯身手的地方。
深色/淺色主題切換 這是現代網站的標配功能。我需要一個按鈕，它能：
切換 &amp;lt;html&amp;gt; 標籤上的 data-theme 屬性 (在 light 與 dark 之間)。 將用戶的偏好儲存在瀏覽器的 localStorage 中，以便下次造訪時維持設定。 當主題變更時，通知 Giscus 留言區一起變更主題。 我的提問大致如下：
「幫我寫一段 JavaScript。當使用者點擊 ID 為 theme-toggle 的按鈕時，在 &amp;lt;html&amp;gt; 元素上切換 data-theme 屬性，值為 &amp;rsquo;light&amp;rsquo; 或 &amp;lsquo;dark&amp;rsquo;。將這個設定存到 localStorage。頁面載入時，優先從 localStorage 讀取設定。最後，當主題改變時，發送一個 postMessage 給 class 為 giscus-frame 的 iframe，內容為 { giscus: { setTheme: newTheme } }。」</description></item></channel></rss>