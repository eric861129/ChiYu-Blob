<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Codex on ChiYu Code Journey</title><link>/ChiYu-Blob/tags/codex/</link><description>Recent content in Codex on ChiYu Code Journey</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 08 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="/ChiYu-Blob/tags/codex/index.xml" rel="self" type="application/rss+xml"/><item><title>我是如何使用 AI (Codex) 打造這個 Hugo 部落格的</title><link>/ChiYu-Blob/posts/%E4%BD%BF%E7%94%A8codex%E9%96%8B%E7%99%BCblob/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E4%BD%BF%E7%94%A8codex%E9%96%8B%E7%99%BCblob/</guid><description>在上一篇文章 《第一次認識 Codex：讓 AI 幫你寫程式不是夢！》 中，我介紹了 Codex 這個強大的 AI 程式助理。而今天，我想分享一個更具體的實戰經驗：我是如何利用 Codex 來開發你現在正在看的這個部落格。
這個網站是使用 Hugo 靜態網站產生器搭建的，並搭配 Tailwind CSS 進行樣式設計。從前端的 JavaScript 互動功能，到後端的 GitHub Actions 自動化部署，許多環節都有 AI 的深度參與。接下來，我會分享幾個關鍵功能的開發過程，以及我是如何「詠唱」我的需求，讓 AI 幫我完成任務的。
1. 前端互動功能：讓網站活起來的 JavaScript 靜態網站很容易變得單調，但透過 JavaScript，我們可以加入許多動態的現代化功能。這也是我認為 Codex 最能大顯身手的地方。
深色/淺色主題切換 這是現代網站的標配功能。我需要一個按鈕，它能：
切換 &amp;lt;html&amp;gt; 標籤上的 data-theme 屬性 (在 light 與 dark 之間)。 將用戶的偏好儲存在瀏覽器的 localStorage 中，以便下次造訪時維持設定。 當主題變更時，通知 Giscus 留言區一起變更主題。 我的提問大致如下：
「幫我寫一段 JavaScript。當使用者點擊 ID 為 theme-toggle 的按鈕時，在 &amp;lt;html&amp;gt; 元素上切換 data-theme 屬性，值為 &amp;rsquo;light&amp;rsquo; 或 &amp;lsquo;dark&amp;rsquo;。將這個設定存到 localStorage。頁面載入時，優先從 localStorage 讀取設定。最後，當主題改變時，發送一個 postMessage 給 class 為 giscus-frame 的 iframe，內容為 { giscus: { setTheme: newTheme } }。」</description></item><item><title>第一次認識 Codex：讓 AI 幫你寫程式不是夢！</title><link>/ChiYu-Blob/posts/codex-intro/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/codex-intro/</guid><description>最近如果你有在關注 AI 或寫程式的領域，可能會聽過一個名字——Codex。它是 OpenAI 推出的一個超厲害工具，簡單來說，就是一個會寫程式的 AI。今天這篇文章就想用比較輕鬆的方式，來帶大家初步認識一下 Codex 是什麼、可以拿來做什麼、還有怎麼開始玩看看。
Codex 是什麼？跟 ChatGPT 有關嗎？ 沒錯，Codex 是 OpenAI（就是做 ChatGPT 那家公司）開發的模型之一。它其實就是 ChatGPT 的「懂程式」版本。
你可以把它想成一個超強的助理工程師，你對它講人話，它就能幫你寫出程式碼。不管你是要寫一個 Python 函式，還是建一個簡單的網頁 API，Codex 都能幫你快速搞定，甚至連註解都幫你寫好。
Codex 可以幫你做什麼？ 它的功能說起來還真不少，這邊列幾個我覺得超實用的：
自然語言變程式碼：你只要打「幫我寫一個排序的函式」，Codex 馬上就可以用 Python 幫你寫出來。 支援多種語言：Python、JavaScript、C#、Go、Ruby……通通支援，開什麼語言的專案都能用。 幫忙除錯：看不懂 error message？丟給 Codex，讓它幫你分析。 寫測試、補註解：這些瑣碎事 Codex 做起來超快，超方便。 誰適合用 Codex？ 老實說，不管你是剛入門的新手，還是忙到炸的資深工程師，Codex 都有它的價值：
對新手來說，它就像一個 24 小時在線的老師，問什麼都不會兇你。 對老手來說，它超像一個效率助手，幫你處理一堆重複或機械性的事，省下超多時間。 要怎麼開始用？ 目前 Codex 主要是整合在 ChatGPT 專業版（Pro）裡，直接在 ChatGPT 裡輸入程式問題就可以用了。
如果你比較偏好本地開發環境，也可以試試看一些支援 Codex 的 IDE 外掛，比如 Visual Studio Code，現在已經有支援類似 Copilot 的功能。
小結一下 Codex 是一個能聽懂你說話、然後幫你寫程式的 AI，對很多人來說，它可以加速開發、降低學習門檻、甚至讓寫程式變得更輕鬆有趣。
如果你還沒試過，不妨開個 ChatGPT Pro 試試，玩玩看 Codex 的威力。這篇文章只是開個頭，之後我也會陸續寫些更進階的使用心得與實際應用分享，敬請期待！</description></item></channel></rss>