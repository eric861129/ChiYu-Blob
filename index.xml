<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ChiYu's Blob on ChiYu Code Journey</title><link>/ChiYu-Blob/</link><description>Recent content in ChiYu's Blob on ChiYu Code Journey</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Wed, 11 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="/ChiYu-Blob/index.xml" rel="self" type="application/rss+xml"/><item><title>搞懂設計模式到底是什麼？</title><link>/ChiYu-Blob/posts/%E6%90%9E%E6%87%82%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC/</link><pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E6%90%9E%E6%87%82%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC/</guid><description>哈囉！最近我決定開始一個新的 Side Project，要來用比較輕鬆的方式跟大家分享一下什麼是「設計模式（Design Patterns）」。
等等先別跑！雖然聽起來很硬，但設計模式其實就是一些「前輩工程師們」留下來的解決問題的好方法。懂了這些，你的程式碼會變得更容易維護，更容易擴充，甚至看起來更專業！（聽起來是不是有點心動了？）
這篇先帶你入個門，我們會聊聊設計模式的概念、分類，最後也會簡單列出一些常見好用的模式，讓你一次搞懂設計模式到底在幹嘛。
🧐 所以，到底什麼是設計模式啊？ 簡單說，設計模式就像是程式設計師之間的「共通語言」。
你一定有過這種經驗：
「欸，我怎麼又寫出這種一團亂的程式碼？」 「這個功能之前不是做過了嗎？為什麼還要再寫一次？」 這時候，如果你腦袋裡裝著幾種設計模式，就像工具箱一樣，你就能更快速地解決這些問題。
設計模式其實就是經過無數開發者實踐後得出的好用解決方案，就像老前輩的私房武功，學起來絕對讓你的程式碼更整齊、更有架構，也比較不容易踩坑。
設計模式可以怎麼分？ 一般來說，設計模式分成三大類：
建立型模式（Creational Patterns）
重點在教你怎麼更聰明地「建立」物件，避免程式碼越寫越複雜。
結構型模式（Structural Patterns）
教你怎麼把物件組合在一起，像拼樂高一樣，輕鬆擴充或調整程式的架構。
行為型模式（Behavioral Patterns）
教你搞定物件之間複雜的「溝通與互動」，讓你的程式碼彼此合作起來更加順暢。
是不是聽起來越來越清楚了？接下來我們更進一步，列出每個分類下的常見模式，讓你一眼看懂設計模式家族有什麼好貨！
常見設計模式大集合 這邊先條列式介紹，未來我會用獨立的文章、一個一個講清楚：
🚀 建立型模式（Creational） 單例模式（Singleton） 工廠方法模式（Factory Method） 抽象工廠模式（Abstract Factory） 原型模式（Prototype） 建造者模式（Builder） 📌 特點： 這一類幫你搞定物件的建立，讓你不用一直煩惱物件從哪裡來，要怎麼產生之類的問題。
2. 結構型模式（Structural） 介面卡模式（Adapter） 橋接模式（Bridge） 組合模式（Composite） 裝飾者模式（Decorator） 外觀模式（Facade） 享元模式（Flyweight） 代理模式（Proxy） 📌 特點： 這些模式專門解決如何「拼裝」不同物件，讓你的程式更容易擴充、更有彈性。
想像成在玩樂高，一個一個小零件組裝起來，最後變成超酷的東西！
🚦 行為型模式（Behavioral） 責任鏈模式（Chain of Responsibility） 命令模式（Command） 解譯器模式（Interpreter） 迭代器模式（Iterator） 中介者模式（Mediator） 備忘錄模式（Memento） 觀察者模式（Observer） 狀態模式（State） 策略模式（Strategy） 模板方法模式（Template Method） 訪問者模式（Visitor） 📌 特點： 處理物件之間的「互動」。如果你常常覺得你的物件們關係很亂，溝通起來像在吵架，那這些模式就是你的救星！</description></item><item><title>想快速打造個人部落格？試試 HugoBlobTemplate，極簡、開源，讓你專注寫作！</title><link>/ChiYu-Blob/posts/%E6%83%B3%E5%BF%AB%E9%80%9F%E6%89%93%E9%80%A0%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC%E8%A9%A6%E8%A9%A6-hugoblobtemplate%E6%A5%B5%E7%B0%A1%E9%96%8B%E6%BA%90%E8%AE%93%E4%BD%A0%E5%B0%88%E6%B3%A8%E5%AF%AB%E4%BD%9C/</link><pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E6%83%B3%E5%BF%AB%E9%80%9F%E6%89%93%E9%80%A0%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC%E8%A9%A6%E8%A9%A6-hugoblobtemplate%E6%A5%B5%E7%B0%A1%E9%96%8B%E6%BA%90%E8%AE%93%E4%BD%A0%E5%B0%88%E6%B3%A8%E5%AF%AB%E4%BD%9C/</guid><description>【文章最終整合版】 想快速打造個人部落格？試試 HugoBlobTemplate，極簡、開源，讓你專注寫作！ 你是不是也曾想過，要建立一個屬於自己的小天地，放些技術筆記、生活隨筆，或是作品集？但一想到要租主機、搞定複雜的後台設定、擔心網站速度，頭就開始痛了？
別擔心！今天就是要來跟你介紹一個我完成的開源專案：HugoBlobTemplate，它能讓你幾乎零成本、超快速地建立一個美觀又實用的個人部落格。
點我前往 HugoBlobTemplate 的 GitHub 專案頁面 這到底是什麼？適合誰用？ 簡單來說，HugoBlobTemplate 是一個基於 Hugo 這個靜態網站生成器所打造的「部落格模板」。
你可能聽過 WordPress，但 Hugo 不一樣。它不會動態去讀取資料庫，而是在你寫完文章後，直接「生成」一整個網站的 HTML 靜態檔案。這樣做有幾個超強的優點：
快！快到飛起！ 因為使用者瀏覽的都只是純粹的 HTML，沒有後端處理、沒有資料庫查詢，載入速度幾乎是瞬間完成。 安全！ 沒有後台登入頁面、沒有資料庫，自然就少了很多被攻擊的風險。 便宜（甚至免費）！ 你可以把生成好的網站檔案，輕鬆部署到像是 GitHub Pages、Netlify 或 Vercel 這些提供免費託管服務的平台上。 所以，HugoBlobTemplate 就是幫你把 Hugo 的環境都設定好，給你一個「開箱即用」的部落格樣式。它特別適合：
工程師/學生：想記錄技術筆記、學習心得，需要一個簡潔、支援程式碼高亮的平台。 文字創作者：不想被複雜的編輯器綁架，希望專注在內容本身。 任何人：想擁有一個「自己的」網站，不想付月費，也不想花大把時間在維護上。 HugoBlobTemplate 有哪些貼心的功能？ 這個專案雖然主打極簡，但在基礎功能上一點也不馬虎。我已經幫你內建了許多實用的功能：
內建亮色/暗色模式：自動偵測使用者系統的偏好設定，也可以讓訪客手動切換，非常貼心。 社群連結整合：想放你的 GitHub、LinkedIn 等連結？只要在設定檔裡填上你的帳號，就會自動出現在個人介紹區塊。 SEO 友善：專案已經幫你處理好基礎的搜尋引擎優化（SEO），讓你的內容更容易被 Google 等搜尋引擎找到。 響應式設計 (RWD)：無論你的訪客用的是電腦、平板還是手機，網站版面都能自動適應，提供最佳的閱讀體驗。 好！我想用！該如何開始？ 整個過程比你想像的還要簡單，大概可以分成以下幾步：
第 1 步：準備環境 (若想在本機預覽) 如果你想在自己的電腦上看到網站的即時變化，需要先安裝兩樣東西：
Git：用來抓取專案程式碼。 Hugo：用來產生網站的核心工具。（官方安裝說明 ） 第 2 步：把專案抓下來 打開你的終端機，輸入以下指令：
git clone https://github.</description></item><item><title>讓部落格成為你的形狀：Hugo 個人化設定終極指南</title><link>/ChiYu-Blob/posts/%E8%AE%93%E9%83%A8%E8%90%BD%E6%A0%BC%E6%88%90%E7%82%BA%E4%BD%A0%E7%9A%84%E5%BD%A2%E7%8B%80hugo-%E5%80%8B%E4%BA%BA%E5%8C%96%E8%A8%AD%E5%AE%9A%E7%B5%82%E6%A5%B5%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E8%AE%93%E9%83%A8%E8%90%BD%E6%A0%BC%E6%88%90%E7%82%BA%E4%BD%A0%E7%9A%84%E5%BD%A2%E7%8B%80hugo-%E5%80%8B%E4%BA%BA%E5%8C%96%E8%A8%AD%E5%AE%9A%E7%B5%82%E6%A5%B5%E6%8C%87%E5%8D%97/</guid><description>讓部落格成為你的形狀：Hugo 個人化設定終極指南 當你成功部署了這個部落格模板，恭喜你完成了第一步！但真正的樂趣現在才開始：將這個公版的部落格，徹底改造成專屬於你的樣子。
這篇文章是一份完整的個人化指南，將帶你從裡到外，一步步設定與調整，打造出獨一無二的個人網站。
第一站：核心設定 (hugo.toml) hugo.toml 是你部落格的「大腦」與「指揮中心」，幾乎所有基本資訊都在這裡設定。
1. 網站基本資訊 首先，打開 hugo.toml 檔案，找到並修改以下幾個關鍵欄位：
baseURL: (最重要!) 這裡必須換成你未來部署網站的最終網址。如果是使用 GitHub Pages，通常會是 https://&amp;lt;你的GitHub帳號&amp;gt;.github.io/&amp;lt;你的專案名稱&amp;gt;/。 title: 你部落格的主要名稱，會顯示在瀏覽器分頁和網站標頭上。 [params] description: 網站的副標題或描述，會顯示在首頁的大標題下方。 [params.author] name: 你的名字或暱稱。 2. 你的社交連結 在 hugo.toml 中，有一個 [params.social] 區塊，你可以在這裡新增、刪除或修改你的社群媒體連結。
# hugo.toml [params.social] GitHub = &amp;#34;https://github.com/eric861129&amp;#34; LinkedIn = &amp;#34;https://www.linkedin.com/in/chiyu-huang/&amp;#34; Threads = &amp;#34;https://www.threads.com/@chiyuisme&amp;#34; # 你也可以新增自己的，例如： # Twitter = &amp;#34;https://twitter.com/your_account&amp;#34; 3. 啟用你自己的留言區 (Giscus) 這個部落格模板整合了 Giscus 留言系統。為了讓讀者能在你的部落格留言，而不是在我的模板專案上，你必須進行設定：
跟隨 Giscus 官網的教學，為你自己的 GitHub 專案啟用 Giscus。 將 hugo.toml 檔案中 [params.giscus] 的設定值，換成你在 Giscus 官網上取得的你自己的設定。 這些設定會被 layouts/_default/baseof.</description></item><item><title>我是如何使用 AI (Codex) 打造這個 Hugo 部落格的</title><link>/ChiYu-Blob/posts/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ai-codex-%E6%89%93%E9%80%A0%E9%80%99%E5%80%8B-hugo-%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ai-codex-%E6%89%93%E9%80%A0%E9%80%99%E5%80%8B-hugo-%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84/</guid><description>在上一篇文章 《第一次認識 Codex：讓 AI 幫你寫程式不是夢！》 中，我介紹了 Codex 這個強大的 AI 程式助理。而今天，我想分享一個更具體的實戰經驗：我是如何利用 Codex 來開發你現在正在看的這個部落格。
這個網站是使用 Hugo 靜態網站產生器搭建的，並搭配 Tailwind CSS 進行樣式設計。從前端的 JavaScript 互動功能，到後端的 GitHub Actions 自動化部署，許多環節都有 AI 的深度參與。接下來，我會分享幾個關鍵功能的開發過程，以及我是如何「詠唱」我的需求，讓 AI 幫我完成任務的。
1. 前端互動功能：讓網站活起來的 JavaScript 靜態網站很容易變得單調，但透過 JavaScript，我們可以加入許多動態的現代化功能。這也是我認為 Codex 最能大顯身手的地方。
深色/淺色主題切換 這是現代網站的標配功能。我需要一個按鈕，它能：
切換 &amp;lt;html&amp;gt; 標籤上的 data-theme 屬性 (在 light 與 dark 之間)。 將用戶的偏好儲存在瀏覽器的 localStorage 中，以便下次造訪時維持設定。 當主題變更時，通知 Giscus 留言區一起變更主題。 我的提問大致如下：
「幫我寫一段 JavaScript。當使用者點擊 ID 為 theme-toggle 的按鈕時，在 &amp;lt;html&amp;gt; 元素上切換 data-theme 屬性，值為 &amp;rsquo;light&amp;rsquo; 或 &amp;lsquo;dark&amp;rsquo;。將這個設定存到 localStorage。頁面載入時，優先從 localStorage 讀取設定。最後，當主題改變時，發送一個 postMessage 給 class 為 giscus-frame 的 iframe，內容為 { giscus: { setTheme: newTheme } }。」</description></item><item><title>第一次認識 Codex：讓 AI 幫你寫程式不是夢！</title><link>/ChiYu-Blob/posts/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AA%8D%E8%AD%98-codex%E8%AE%93-ai-%E5%B9%AB%E4%BD%A0%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B8%8D%E6%98%AF%E5%A4%A2/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/posts/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AA%8D%E8%AD%98-codex%E8%AE%93-ai-%E5%B9%AB%E4%BD%A0%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B8%8D%E6%98%AF%E5%A4%A2/</guid><description>最近如果你有在關注 AI 或寫程式的領域，可能會聽過一個名字——Codex。它是 OpenAI 推出的一個超厲害工具，簡單來說，就是一個會寫程式的 AI。今天這篇文章就想用比較輕鬆的方式，來帶大家初步認識一下 Codex 是什麼、可以拿來做什麼、還有怎麼開始玩看看。
Codex 是什麼？跟 ChatGPT 有關嗎？ 沒錯，Codex 是 OpenAI（就是做 ChatGPT 那家公司）開發的模型之一。它其實就是 ChatGPT 的「懂程式」版本。
你可以把它想成一個超強的助理工程師，你對它講人話，它就能幫你寫出程式碼。不管你是要寫一個 Python 函式，還是建一個簡單的網頁 API，Codex 都能幫你快速搞定，甚至連註解都幫你寫好。
Codex 可以幫你做什麼？ 它的功能說起來還真不少，這邊列幾個我覺得超實用的：
自然語言變程式碼：你只要打「幫我寫一個排序的函式」，Codex 馬上就可以用 Python 幫你寫出來。 支援多種語言：Python、JavaScript、C#、Go、Ruby……通通支援，開什麼語言的專案都能用。 幫忙除錯：看不懂 error message？丟給 Codex，讓它幫你分析。 寫測試、補註解：這些瑣碎事 Codex 做起來超快，超方便。 誰適合用 Codex？ 老實說，不管你是剛入門的新手，還是忙到炸的資深工程師，Codex 都有它的價值：
對新手來說，它就像一個 24 小時在線的老師，問什麼都不會兇你。 對老手來說，它超像一個效率助手，幫你處理一堆重複或機械性的事，省下超多時間。 要怎麼開始用？ 目前 Codex 主要是整合在 ChatGPT 專業版（Pro）裡，直接在 ChatGPT 裡輸入程式問題就可以用了。
如果你比較偏好本地開發環境，也可以試試看一些支援 Codex 的 IDE 外掛，比如 Visual Studio Code，現在已經有支援類似 Copilot 的功能。
小結一下 Codex 是一個能聽懂你說話、然後幫你寫程式的 AI，對很多人來說，它可以加速開發、降低學習門檻、甚至讓寫程式變得更輕鬆有趣。
如果你還沒試過，不妨開個 ChatGPT Pro 試試，玩玩看 Codex 的威力。這篇文章只是開個頭，之後我也會陸續寫些更進階的使用心得與實際應用分享，敬請期待！</description></item><item><title>關於</title><link>/ChiYu-Blob/about/</link><pubDate>Sat, 29 Nov 1997 00:00:00 +0000</pubDate><guid>/ChiYu-Blob/about/</guid><description>我是 ChiYu ~ 也可以叫我Eric。 一名軟體工程師。 擅長C# .Net 開發。</description></item></channel></rss>